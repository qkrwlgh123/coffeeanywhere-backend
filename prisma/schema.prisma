// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int          @id @default(autoincrement())
  name           String
  username       String       @unique
  email          String       @unique
  password       String
  location       String
  avatar         String?
  githubUsername String
  following      User[]       @relation("FollowRelation", references: [id])
  followers      User[]       @relation("FollowRelation", references: [id])
  coffeeShop     CoffeeShop[]
  reply          Reply[]
  likes          Like[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

}

model CoffeeShop {
  id          Int               @id @default(autoincrement())
  name        String
  latitude    String?
  longitude   String?
  description String?
  open        Boolean?
  user        User              @relation(fields: [userId], references: [id])
  userId      Int
  photos      CoffeeShopPhoto[]
  categories  Category[]
  replys      Reply[]
  likes       Like[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model CoffeeShopPhoto {
  id           Int        @id @default(autoincrement())
  url          String
  shop         CoffeeShop @relation(fields: [coffeeShopId], references: [id])
  coffeeShopId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Category {
  id        Int          @id @default(autoincrement())
  name      String
  slug      String?
  shops     CoffeeShop[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Reply {
  id           Int         @id @default(autoincrement())
  content      String?
  user         User?       @relation(fields: [userId], references: [id])
  userId       Int?
  coffeeShop   CoffeeShop? @relation(fields: [coffeeShopId], references: [id])
  coffeeShopId Int?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Like {
  id           Int         @id @default(autoincrement())
  like         Boolean?
  user         User?       @relation(fields: [userId], references: [id])
  userId       Int?
  coffeeShop   CoffeeShop? @relation(fields: [coffeeShopId], references: [id])
  coffeeShopId Int?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}
